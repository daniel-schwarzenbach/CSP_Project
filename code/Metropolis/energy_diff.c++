#include <Metropolis/energy_diff.h++>

// Calculate Energy Difference //

// This function calculates and returns the energy difference of two spin
// configurations, that just differ at one position. In the context
// of the Metropolis algorithm this means the energy difference between
// an initial configuration and a proposed update of the lattice
// that is generated by a trial move. The energy difference is then used
// to decide if the change is accepted.

// Input:
//      - refrence to the lattice
//      - x coordinate of the changed spin
//      - y coordinate of the changed spin
//      - z coordinate of the changed spin
//      - initial spin
//      - proposed spin update
//      - interaction strength J of the Heisenberg model
//      - external magnetic field
//      - spatial anisotropy of the system

// Output:
//      Returns the energy difference of the two spin configurations.
flt calculateEnergyDiff(Lattice const& lattice, int  const& x, 
                        int const& y,int const& z, 
                        Spin const& oldSpin, Spin const& newSpin, 
                        flt const& J, Spin const& h, Spin const& k){

    // Get dimensions of the lattice
    int Lx = lattice.Lx();
    int Ly = lattice.Ly();
    int Lz = lattice.Lz();

    Array<Index> neighbors = {
        {x + 1, y, z}, {x - 1, y, z}, {x, y + 1, z}, {x, y - 1, z}, 
        {x, y, z + 1}, {x, y, z - 1}};
    // Energies of old and new configuration
    flt energyOld = 0.0;
    flt energyNew = 0.0;
    for (Index neighbor : neighbors)
    {
        // Get indices of neighbors
        // Get neighboring spin
        Spin neighborSpin;
        neighborSpin = lattice(neighbor);

        // Calcualte and add energies
        energyOld += -J * (oldSpin | neighborSpin) 
                     - (oldSpin | h) 
                     - pow((oldSpin | k), 2);
        energyNew += -J * (newSpin | neighborSpin) 
                     - (newSpin | h) 
                     - pow((newSpin | k), 2);
    }   
    // Calculate energy difference (deltaE)
    flt deltaE = energyNew - energyOld;
    return deltaE;
}