#include <Metropolis/energy_diff.h++>

// Calculate Energy Difference //

// This function calculates and returns the energy difference of two spin
// configurations, that just differ at one position. In the context 
// of the Metropolis algorithm this means the energy difference between
// an initial configuration and a proposed update of the lattice
// that is generated by a trial move. The energy difference is then used
// to decide if the change is accepted.

// Input: 
//      - refrence to the lattice
//      - x coordinate of the changed spin
//      - y coordinate of the changed spin
//      - z coordinate of the changed spin
//      - initial spin
//      - proposed spin update
//      - interaction strength J of the Heisenberg model
//      - external magnetic field
//      - spatial anisotropy of the system

// Output: 
//      Returns the energy difference of the two spin configurations.
float calculateEnergyDiff(Lattice& lattice, int x, int y, int z,
            Spin& oldSpin, Spin& newSpin, float interactionStrength,
            Eigen::Vector3d H, Eigen::Vector3d k) {

    // Get dimensions of the lattice
    int Lx = lattice.Lx();
    int Ly = lattice.Ly();
    int Lz = lattice.Lz();

    // Indices of nearest neighbors (periodic boundary conditions assumed)
    int neighbors[6][3] = {
        {(x + 1) % Lx, y, z}, {(x - 1 + Lx) % Lx, y, z}, // +x, -x neighbors
        {x, (y + 1) % Ly, z}, {x, (y - 1 + Ly) % Ly},    // +y, -y neighbors
        {x, y, (z + 1) % Lz}, {x, y, (z - 1 + Lz) % Lz}  // +z, -z neighbors
    };

    // Energies of old and new configuration
    float energyOld = 0.0;
    float energyNew = 0.0;
    for (int i = 0; i < 6; ++i) {
        // Get indices of neighbors
        int nx = neighbors[i][0];
        int ny = neighbors[i][1];
        int nz = neighbors[i][2];
        // Get neighboring spin
        Spin& neighborSpin = lattice(nx, ny, nz);
        // Calcualte and add energies
        energyOld += -interactionStrength * (oldSpin | neighborSpin) - (oldSpin | H) - pow((oldSpin | k), 2);
        energyNew += -interactionStrength * (newSpin | neighborSpin) - (newSpin | H) - pow((newSpin | k), 2);
    }   

    // Calculate energy difference (deltaE)
    float deltaE = energyNew - energyOld;
    return deltaE;
}